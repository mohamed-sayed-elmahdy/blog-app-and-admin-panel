[
  {
    "id": 1,
    "question": "What is useState and why do we use it in React?",
    "codeSnippet": "const [state, setState] = useState(initialState);",
    "hints": [
      "useState is a React Hook that lets functional components hold state.",
      "It returns an array: [value, setter]. Use the setter to update state and trigger re-render."
    ],
    "answer": "",
    "expectedOutput": "",
    "runInstructions": "Use the example in a React component (create-react-app, Next.js, or similar) and open the app in the browser.",
    "stepByStep": [
      "Import useState from React.",
      "Call useState with an initial value inside a functional component.",
      "Destructure the returned array to get the state and its updater function.",
      "Use the updater to change state and observe re-render."
    ],
    "followUpSuggestions": [
      "Learn about useEffect for side effects in function components.",
      "Explore useReducer for complex state logic and useContext for passing state."
    ],
    "codeLanguage": "javascript",
    "categories": [
      "React",
      "Hooks",
      "State Management"
    ],
    "difficulty": "easy",
    "timeEstimate": "2m",
    "interactive": true,
    "editableCode": true,
    "tests": [],
    "points": 5
  },
  {
    "id": 2,
    "question": "What will be logged and why?\n\nfor (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 0);\n}",
    "codeSnippet": "for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 0);\n}",
    "hints": [
      "Consider var's scope: function-scoped, not block-scoped.",
      "Think about when setTimeout callbacks execute relative to the loop finishing."
    ],
    "answer": "It logs 3 three times because var is function-scoped; the single i variable becomes 3 by the time the callbacks run.",
    "expectedOutput": "3\n3\n3\n",
    "runInstructions": "Paste the code into the browser console or save to a file and run with Node: node file.js",
    "stepByStep": [
      "The loop runs synchronously and increments i until it becomes 3.",
      "setTimeout callbacks are scheduled and run after the current call stack finishes.",
      "All callbacks read the same function-scoped i which is 3."
    ],
    "followUpSuggestions": [
      "Fix it by using let instead of var.",
      "Capture the current i using an IIFE."
    ],
    "codeLanguage": "javascript",
    "categories": [
      "JavaScript",
      "Asynchronous",
      "Closures"
    ],
    "difficulty": "easy",
    "timeEstimate": "2m",
    "interactive": true,
    "editableCode": true,
    "tests": [
      {
        "type": "stdout",
        "match": "^3\\s*3\\s*3\\s*$",
        "description": "Three lines with 3"
      },
      {
        "points": 5
      }
    ]
  }
]
